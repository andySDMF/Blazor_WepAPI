@page "/Events/EditEvent/{Id:int}"
@using System.Text.Json.Nodes

@inject HttpClient http
@inject NavigationManager nav
@inject IJSRuntime JSRuntime

<PageTitle>EditEvent</PageTitle>

<div class="row mb-5">
	<div class="col-lg-8">
		<h1 class="mb-5">Edit Event</h1>

		@if(eventData == null)
		{
			<p><em>Loading...</em></p>
		}
		else
		{
			<div class="row mb-3">
				<label class="col-md-4 col-form-label">ID</label>
				<div class="col-md-8">
					<input class="form-control-plaintext" readonly value="@Id">
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Name</label>
				<div class="col-md-8">
					<input class="form-control" @bind="EventDtoData.Name">
					<span class="text-danger">@Errors["Name"]?[0]</span>
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Description</label>
				<div class="col-md-8">
					<textarea class="form-control" @bind="EventDtoData.Description"></textarea>
					<span class="text-danger">@Errors["Description"]?[0]</span>
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Start Date</label>
				<div class="col-md-8">
					<input type="datetime-local" class="form-control" @bind="EventDtoData.Start">
					<span class="text-danger">@Errors["Start"]?[0]</span>
				</div>
			</div>

			<div class="row mb-3">
				<label class="col-md-4 col-form-label">Start Date</label>
				<div class="col-md-8">
					<input type="datetime-local" class="form-control" @bind="EventDtoData.End">
					<span class="text-danger">@Errors["End"]?[0]</span>
				</div>
			</div>

			<div class="row mb-3">
				<div class="col-md-4 offset-md-4">
					<div class="form-check">
						<input class="form-check-input" type="checkbox" id="gridCheck1" @bind="EventDtoData.AllDay">
						<label class="form-check-label" for="gridCheck1">
							All Day
						</label>
					</div>
				</div>
			</div>

			<div class="row mb-3">
				<div class="offset-md-4 col-md-4 d-grid">
					<button class="btn btn-primary" @onclick="SaveEvent">Save</button>
				</div>
				<div class="col-md-4 d-grid">
					<button class="btn btn-outline-primary" @onclick="CancelEdit">Cancel</button>
				</div>
			</div>
		}
	</div>
</div>

@code {

	[Parameter]
	public int Id { get; set; }

	public Event? eventData = null;
	public EventDto EventDtoData { get; set; } = new();
	public JsonNode Errors { get; set; } = new JsonObject();

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			eventData = await http.GetFromJsonAsync<Event>("api/Events/" + Id);
			EventDtoData.Name = eventData?.Name ?? "";
			EventDtoData.Description = eventData?.Description ?? "";
			EventDtoData.Start = eventData?.Start ?? DateTime.Now;
			EventDtoData.End = eventData?.End;
			EventDtoData.AllDay = eventData?.AllDay ?? false;
		}
		catch(Exception ex)
		{
			Console.WriteLine("Exception : " + ex.Message);
		}
	}

	private async Task SaveEvent()
	{
		var response = await http.PutAsJsonAsync("api/Events/" + Id, EventDtoData);

		if (response.IsSuccessStatusCode)
		{
			nav.NavigateTo("/Events");
		}
		else
		{
			var strResponse = await response.Content.ReadAsStringAsync();
			Console.WriteLine("Json Response \n" + strResponse);

			try
			{
				var jsonResponse = JsonNode.Parse(strResponse);
				Errors = jsonResponse?["errors"] ?? new JsonObject();
			}
			catch (Exception ex)
			{

			}
		}
	}


	private async Task CancelEdit()
	{
		if (CheckValuesHaveChanged())
		{
			if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to leave page with pending changes?"))
			{
				return;
			}
		}

		nav.NavigateTo("/Events");
	}

	private bool CheckValuesHaveChanged()
	{
		if (eventData?.Name != EventDtoData.Name || eventData?.Description != EventDtoData.Description
		|| eventData?.Start != EventDtoData.Start || eventData?.End != EventDtoData.End
		|| eventData?.AllDay != EventDtoData.AllDay)
		{
			return true;
		}

		return false;
	}
}
